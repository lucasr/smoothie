package org.lucasr.smoothie;

import android.view.View;
import android.widget.Adapter;

/**
 * {@code SimpleItemLoader} is an {@link ItemLoader} specialised in loading and
 * displaying single-part items in {@link AsyncListView} or {@link AsyncGridView}.
 * It simply hides all the item part elements of the {@link ItemLoader} API as
 * they are not needed on single-part items.
 *
 * <p>You should use {@link ItemLoader} if your {@link AsyncListView} or
 * {@link AsyncGridView} contains multi-part items i.e. needs more than one
 * asynchronous loading operation per item.</p>
 *
 * <p>Refer to the {@link ItemLoader} for more detailed documentation on the API.</p>
 *
 * @author Lucas Rocha <lucasr@lucasr.org>
 */
public abstract class SimpleItemLoader<Params, Result> extends ItemLoader<Adapter, Params, Result> {
    @Override
    final public int getItemPartCount(Adapter adapter, int position) {
        return 1;
    }

    @Override
    final public boolean shouldPreloadItemPart(Adapter adapter, int position, int itemPart) {
        return true;
    }

    @Override
    final public Result loadItemPart(Params itemParams, int itemPart) {
        return loadItem(itemParams);
    }

    /**
     * Loads the item data. This method is called in a background thread.
     * Hence you can make blocking calls (I/O, heavy computing) in your
     * implementation.
     *
     * @param itemParams - The parameters generated by
     *        {@link #getItemParams(Adapter, int)}.
     *
     * @return The loaded item data.
     */
    public abstract Result loadItem(Params itemParams);

    @Override
    final public Result loadItemPartFromMemory(Params itemParams, int itemPart) {
        return loadItemFromMemory(itemParams);
    }

    /**
     * Attempts to load the item data from memory. This method is called
     * in the UI thread. In most implementations, this method will simply
     * query a memory cache using the item parameters as a key.
     *
     * @param itemParams - The parameters generated by
     *        {@link #getItemParams(Adapter, int)}
     *
     * @return The cached item data.
     */
    public abstract Result loadItemFromMemory(Params itemParams);

    @Override
    final public void displayItemPart(View itemView, Result result, int itemPart,
            boolean fromMemory) {
        displayItem(itemView, result, fromMemory);
    }

    /**
     * Displays the loaded item data in the target view. This method is called
     * in the UI thread.
     *
     * @param itemView - The target item view returned by your Adapter's
     *        {@link android.widget.Adapter #getView(int, View, android.view.ViewGroup)}
     *        implementation.
     * @param result - The item data loaded from {@link #loadItem(Object)} or
     *        {@link #loadItemFromMemory(Object)}.
     * @param fromMemory - {@code True} if the item data has been loaded from
     *        {@link #loadItemFromMemory(Object)}. {@code False} if it has been
     *        loaded from {@link #loadItem(Object)}. This argument is usually used
     *        to skip animations when displaying preloaded items.
     */
    public abstract void displayItem(View itemView, Result result, boolean fromMemory);
}
